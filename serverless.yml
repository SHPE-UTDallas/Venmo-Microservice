# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: venmo-microservice
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  tableName: 'venmo-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [ "UsersDynamoDBTable", "Arn" ] }
  environment:
    VENMO_ACCESS_TOKEN: ${env:VENMO_ACCESS_TOKEN}
    VENMO_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

# Example for how to setup lambda functions if we want to move away from flask in the future
#  createToken:
#    handler: api.createToken
#    memorySize: 128
#    description: Creates a token the user must input to automatically verify their payment status
#    events:
#      - http:
#          path: createToken
#          method: post
#
#  associateVenmoIdWithUser:
#    handler: api.associateVenmoIdWithUser
#    memorySize: 128
#    description: Create a record in dynamodb that links a user's venmo id back to their interal website id. This method of verification only works if they haven't already submitted a payment
#    events:
#      - http:
#        path: associateVenmoIdWithUser
#        method: post
#
#  verifyPaymentStatus:
#    handler: api.verifyPaymentStatus
#    memorySize: 128
#    description: Verify that a user has paid their dues
#    events:
#      - http:
#          path: verifyPaymentStatus/{userId}
#          method: get
